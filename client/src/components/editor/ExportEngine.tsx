import React, { useState } from 'react';
import { ComponentConfig } from '@/pages/Editor';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Download, FileImage, FileCode, FileText, Braces, ExternalLink, Lock } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import html2canvas from 'html2canvas';
import JSZip from 'jszip';

interface ExportEngineProps {
  components: ComponentConfig[];
  canvasRef: React.RefObject<HTMLDivElement>;
  userTier: 'free' | 'premium' | 'deluxe';
}

interface ExportOption {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  requiredTier: 'free' | 'premium' | 'deluxe';
  format: string;
  disabled?: boolean;
}

export const ExportEngine: React.FC<ExportEngineProps> = ({ 
  components, 
  canvasRef, 
  userTier 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [exportType, setExportType] = useState<string>('');

  const exportOptions: ExportOption[] = [
    {
      id: 'png',
      name: 'PNG Preview',
      description: 'High-resolution screenshot of your design',
      icon: <FileImage className="w-5 h-5" />,
      requiredTier: 'free',
      format: 'PNG'
    },
    {
      id: 'html',
      name: 'HTML & CSS',
      description: 'Static HTML with Tailwind CSS classes',
      icon: <FileCode className="w-5 h-5" />,
      requiredTier: 'premium',
      format: 'ZIP'
    },
    {
      id: 'react',
      name: 'React Components',
      description: 'TSX components with TypeScript definitions',
      icon: <FileText className="w-5 h-5" />,
      requiredTier: 'premium',
      format: 'ZIP'
    },
    {
      id: 'json',
      name: 'JSON Schema',
      description: 'Complete component configuration data',
      icon: <Braces className="w-5 h-5" />,
      requiredTier: 'deluxe',
      format: 'JSON'
    },
    {
      id: 'codepen',
      name: 'CodePen Snippet',
      description: 'Embeddable live preview link',
      icon: <ExternalLink className="w-5 h-5" />,
      requiredTier: 'deluxe',
      format: 'LINK'
    }
  ];

  const canUseExport = (option: ExportOption) => {
    const tierLevels = { free: 0, premium: 1, deluxe: 2 };
    return tierLevels[userTier] >= tierLevels[option.requiredTier];
  };

  const generateHTML = (components: ComponentConfig[]): string => {
    const componentHTML = components
      .sort((a, b) => (a.zIndex || 0) - (b.zIndex || 0))
      .map(component => {
        const styles = [
          `position: absolute`,
          `left: ${component.position.x}px`,
          `top: ${component.position.y}px`,
          `width: ${component.size.width}px`,
          `height: ${component.size.height}px`,
          component.rotation ? `transform: rotate(${component.rotation}deg)` : '',
          (component.opacity ?? 100) !== 100 ? `opacity: ${(component.opacity ?? 100) / 100}` : '',
          component.blendMode !== 'normal' ? `mix-blend-mode: ${component.blendMode}` : '',
          component.visible === false ? 'display: none' : ''
        ].filter(Boolean).join('; ');

        const content = generateComponentContent(component);
        
        return `  <div class="component-${component.type}" style="${styles}">
    ${content}
  </div>`;
      }).join('\n');

    return `<!DOCTYPE html>
<!-- Generated by ComponentForge v0.1 → Petar Nikolić designed -->
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ComponentForge Export</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .component-container {
      position: relative;
      width: 100%;
      height: 100vh;
      background: #f8fafc;
    }
    ${userTier === 'free' ? `
    .watermark {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 9999;
    }` : ''}
  </style>
</head>
<body>
  <div class="component-container">
${componentHTML}
${userTier === 'free' ? '    <div class="watermark">ComponentForge Preview</div>' : ''}
  </div>
</body>
</html>`;
  };

  const generateComponentContent = (component: ComponentConfig): string => {
    const { props } = component;
    
    switch (component.type) {
      case 'hero':
        return `    <div class="p-8 text-center">
      <h1 class="text-4xl font-bold mb-4">${props.headline || 'Hero Title'}</h1>
      <p class="text-lg text-gray-600 mb-6">${props.subheadline || 'Hero subtitle'}</p>
      <button class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
        ${props.primaryCTA || 'Get Started'}
      </button>
    </div>`;
      
      case 'feature':
        return `    <div class="p-6">
      <h3 class="text-xl font-semibold mb-3">${props.headline || 'Feature Title'}</h3>
      <p class="text-gray-600">${props.subheadline || 'Feature description'}</p>
    </div>`;
      
      case 'button':
        return `    <button class="w-full h-full bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
      ${props.primaryCTA || 'Button Text'}
    </button>`;
      
      case 'testimonial':
        return `    <div class="p-6 bg-white rounded-lg shadow-sm">
      <p class="text-gray-600 mb-4">"${props.content || 'Great product!'}"</p>
      <div class="font-semibold">${props.author || 'Customer Name'}</div>
    </div>`;
      
      default:
        return `    <div class="w-full h-full bg-gray-200 rounded-lg flex items-center justify-center">
      <span class="text-gray-500">${component.type}</span>
    </div>`;
    }
  };

  const generateReactComponent = (component: ComponentConfig): string => {
    const componentName = `${component.type.charAt(0).toUpperCase()}${component.type.slice(1)}Component`;
    
    const propsInterface = `interface ${componentName}Props {
  ${Object.keys(component.props).map(key => `${key}?: string;`).join('\n  ')}
}`;

    const componentContent = generateReactComponentContent(component);

    return `import React from 'react';

${propsInterface}

export const ${componentName}: React.FC<${componentName}Props> = ({
  ${Object.keys(component.props).map(key => `${key} = "${component.props[key] || ''}"`).join(',\n  ')}
}) => {
  return (
${componentContent}
  );
};`;
  };

  const generateReactComponentContent = (component: ComponentConfig): string => {
    const { props } = component;
    
    switch (component.type) {
      case 'hero':
        return `    <div className="p-8 text-center">
      <h1 className="text-4xl font-bold mb-4">{headline}</h1>
      <p className="text-lg text-gray-600 mb-6">{subheadline}</p>
      <button className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
        {primaryCTA}
      </button>
    </div>`;
      
      case 'feature':
        return `    <div className="p-6">
      <h3 className="text-xl font-semibold mb-3">{headline}</h3>
      <p className="text-gray-600">{subheadline}</p>
    </div>`;
      
      case 'button':
        return `    <button className="w-full h-full bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
      {primaryCTA}
    </button>`;
      
      case 'testimonial':
        return `    <div className="p-6 bg-white rounded-lg shadow-sm">
      <p className="text-gray-600 mb-4">"{content}"</p>
      <div className="font-semibold">{author}</div>
    </div>`;
      
      default:
        return `    <div className="w-full h-full bg-gray-200 rounded-lg flex items-center justify-center">
      <span className="text-gray-500">${component.type}</span>
    </div>`;
    }
  };

  const exportPNG = async () => {
    if (!canvasRef.current) return;

    setIsExporting(true);
    setExportType('PNG');

    try {
      const canvas = await html2canvas(canvasRef.current, {
        scale: 2,
        backgroundColor: '#f8fafc',
        logging: false,
        useCORS: true
      });

      const link = document.createElement('a');
      link.download = `componentforge-export-${Date.now()}.png`;
      link.href = canvas.toDataURL('image/png');
      link.click();

      toast({
        title: "Export Complete",
        description: "PNG file has been downloaded successfully."
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate PNG. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
      setExportType('');
    }
  };

  const exportHTML = async () => {
    if (!canUseExport({ requiredTier: 'premium' } as ExportOption)) return;

    setIsExporting(true);
    setExportType('HTML');

    try {
      const zip = new JSZip();
      const htmlContent = generateHTML(components);
      
      zip.file('index.html', htmlContent);
      zip.file('README.md', `# ComponentForge Export

This export contains your landing page components as static HTML and CSS.

## Files:
- index.html - Main HTML file with embedded styles
- README.md - This file

## Usage:
1. Open index.html in any web browser
2. Deploy to any static hosting service
3. Customize the code as needed

Generated by ComponentForge v0.1`);

      const blob = await zip.generateAsync({ type: 'blob' });
      const link = document.createElement('a');
      link.download = `componentforge-html-export-${Date.now()}.zip`;
      link.href = URL.createObjectURL(blob);
      link.click();

      toast({
        title: "Export Complete",
        description: "HTML/CSS files have been downloaded as ZIP."
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate HTML export. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
      setExportType('');
    }
  };

  const exportReact = async () => {
    if (!canUseExport({ requiredTier: 'premium' } as ExportOption)) return;

    setIsExporting(true);
    setExportType('React');

    try {
      const zip = new JSZip();
      
      // Generate individual component files
      components.forEach(component => {
        const componentCode = generateReactComponent(component);
        zip.file(`components/${component.type}/${component.id}.tsx`, componentCode);
      });

      // Generate main App component
      const mainAppCode = `import React from 'react';
${components.map(c => `import { ${c.type.charAt(0).toUpperCase()}${c.type.slice(1)}Component } from './components/${c.type}/${c.id}';`).join('\n')}

const App: React.FC = () => {
  return (
    <div className="relative w-full h-screen bg-gray-50">
${components.map(c => `      <div
        style={{
          position: 'absolute',
          left: '${c.position.x}px',
          top: '${c.position.y}px',
          width: '${c.size.width}px',
          height: '${c.size.height}px',
          transform: 'rotate(${c.rotation || 0}deg)',
          opacity: ${(c.opacity || 100) / 100},
          zIndex: ${c.zIndex || 0}
        }}
      >
        <${c.type.charAt(0).toUpperCase()}${c.type.slice(1)}Component />
      </div>`).join('\n')}
    </div>
  );
};

export default App;`;

      zip.file('App.tsx', mainAppCode);

      // Generate package.json
      const packageJson = {
        name: 'componentforge-export',
        version: '1.0.0',
        private: true,
        dependencies: {
          'react': '^18.2.0',
          'react-dom': '^18.2.0',
          '@types/react': '^18.2.0',
          '@types/react-dom': '^18.2.0',
          'tailwindcss': '^3.3.0',
          'typescript': '^5.0.0'
        },
        scripts: {
          'start': 'react-scripts start',
          'build': 'react-scripts build',
          'test': 'react-scripts test',
          'eject': 'react-scripts eject'
        }
      };

      zip.file('package.json', JSON.stringify(packageJson, null, 2));
      zip.file('README.md', `# ComponentForge React Export

This export contains your landing page components as React TSX files.

## Installation:
\`\`\`bash
npm install
npm start
\`\`\`

## Files:
- App.tsx - Main application component
- components/ - Individual component files
- package.json - Dependencies and scripts

Generated by ComponentForge v0.1`);

      const blob = await zip.generateAsync({ type: 'blob' });
      const link = document.createElement('a');
      link.download = `componentforge-react-export-${Date.now()}.zip`;
      link.href = URL.createObjectURL(blob);
      link.click();

      toast({
        title: "Export Complete",
        description: "React components have been downloaded as ZIP."
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate React export. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
      setExportType('');
    }
  };

  const exportJSON = async () => {
    if (!canUseExport({ requiredTier: 'deluxe' } as ExportOption)) return;

    setIsExporting(true);
    setExportType('JSON');

    try {
      const exportData = {
        version: '1.0.0',
        generatedAt: new Date().toISOString(),
        components: components.map(component => ({
          ...component,
          metadata: {
            created: new Date().toISOString(),
            type: 'component',
            version: '1.0.0'
          }
        })),
        canvas: {
          width: 1200,
          height: 800,
          background: '#f8fafc'
        }
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], { 
        type: 'application/json' 
      });
      const link = document.createElement('a');
      link.download = `componentforge-schema-${Date.now()}.json`;
      link.href = URL.createObjectURL(blob);
      link.click();

      toast({
        title: "Export Complete",
        description: "JSON schema has been downloaded successfully."
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate JSON export. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
      setExportType('');
    }
  };

  const exportCodePen = async () => {
    if (!canUseExport({ requiredTier: 'deluxe' } as ExportOption)) return;

    setIsExporting(true);
    setExportType('CodePen');

    try {
      const htmlContent = generateHTML(components);
      
      // Create CodePen data
      const codePenData = {
        title: 'ComponentForge Export',
        description: 'Generated by ComponentForge',
        html: htmlContent.split('<body>')[1].split('</body>')[0],
        css: '',
        js: '',
        css_external: 'https://cdn.tailwindcss.com',
        js_external: ''
      };

      // Open CodePen with the data
      const form = document.createElement('form');
      form.action = 'https://codepen.io/pen/define';
      form.method = 'POST';
      form.target = '_blank';

      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'data';
      input.value = JSON.stringify(codePenData);

      form.appendChild(input);
      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);

      toast({
        title: "Export Complete",
        description: "CodePen snippet opened in new tab."
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate CodePen snippet. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
      setExportType('');
    }
  };

  const handleExport = (optionId: string) => {
    switch (optionId) {
      case 'png':
        exportPNG();
        break;
      case 'html':
        exportHTML();
        break;
      case 'react':
        exportReact();
        break;
      case 'json':
        exportJSON();
        break;
      case 'codepen':
        exportCodePen();
        break;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700">
          <Download className="mr-2 h-4 w-4" />
          Export
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl">
        <DialogHeader>
          <DialogTitle>Export Your Design</DialogTitle>
        </DialogHeader>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          {exportOptions.map(option => {
            const canUse = canUseExport(option);
            const isCurrentlyExporting = isExporting && exportType === option.format;
            
            return (
              <Card key={option.id} className={`cursor-pointer transition-all ${
                canUse ? 'hover:shadow-md' : 'opacity-50 cursor-not-allowed'
              } ${isCurrentlyExporting ? 'ring-2 ring-blue-500' : ''}`}>
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {option.icon}
                      <div>
                        <CardTitle className="text-lg">{option.name}</CardTitle>
                        <CardDescription className="text-sm">
                          {option.description}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="text-xs">
                        {option.format}
                      </Badge>
                      {!canUse && <Lock className="w-4 h-4 text-gray-400" />}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="flex items-center justify-between">
                    <div className="text-sm text-gray-500">
                      Requires: {option.requiredTier.charAt(0).toUpperCase() + option.requiredTier.slice(1)} tier
                    </div>
                    <Button
                      size="sm"
                      variant={canUse ? "default" : "outline"}
                      disabled={!canUse || isExporting}
                      onClick={() => canUse && handleExport(option.id)}
                    >
                      {isCurrentlyExporting ? 'Exporting...' : canUse ? 'Export' : 'Upgrade'}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <Badge variant="outline">{userTier.toUpperCase()}</Badge>
            <span className="text-sm font-medium">Current Plan</span>
          </div>
          <p className="text-sm text-gray-600">
            {userTier === 'free' && 'Upgrade to Premium to unlock HTML/CSS and React exports, or Deluxe for full export capabilities.'}
            {userTier === 'premium' && 'Upgrade to Deluxe to unlock JSON schema and CodePen snippet exports.'}
            {userTier === 'deluxe' && 'You have access to all export formats and features!'}
          </p>
        </div>
      </DialogContent>
    </Dialog>
  );
};